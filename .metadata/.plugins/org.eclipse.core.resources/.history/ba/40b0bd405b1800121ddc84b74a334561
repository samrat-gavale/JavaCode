package recursion;

import java.util.Scanner;

public class Manhattan2 {
	public static void main(String args[]){

		int[][] mat, blocked_ver, blocked_hor;
		mat = new int[100][100];
		blocked_ver = new int[100][100];
		blocked_hor = new int[100][100];
		int M, N,i,j,k, prev_indx;
		Scanner s = new Scanner(System.in);
		M = s.nextInt();
		N = s.nextInt();
		String blocks[] = {};
		int[] single_block = new int[4];
		char[] str;
		for(i = 0; i < blocks.length; i++)
		{
			k = 0;
			prev_indx = 0;
			str = blocks[i].toCharArray();
			for(j=0;j<str.length;j++)
				if(str[j] == ' '){
					single_block[k++] = arr_to_int(str,prev_indx,j-1);
					prev_indx = j+1;
				}
			if(single_block[0] == single_block[2])
			{
				blocked_ver[single_block[1]][single_block[0]] = 1;
			}
		}
		mat[0][0] = 1;
		for(i=1;i<M;i++)
			for(j=1;j<N;j++)
				mat[i][j] = (blocked_ver[i-1][j] != 1 ? mat[i-1][j] : 0) + 
							(blocked_hor[i][j-1] != 1 ? mat[i][j-1] : 0);
		System.out.print("Number of paths from top left to bottom right = "+mat[N-1][N-1]);	
	}
	public static int arr_to_int(char[] str, int i1, int i2) {
		int i,n = 0;
		for(i=i1;i<i2;i++)
			n = n*10 + str[i];
		return n;
	}
}
